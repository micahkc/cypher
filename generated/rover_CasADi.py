"""
Automatically generated by Rumoca
"""
import casadi as ca
import numpy as np
sin = ca.sin
cos = ca.cos
tan = ca.tan

class Model:
    """
    Flattened Modelica Model
    """

    def __init__(self, model_name):
        # ============================================
        # Initialize


        # Create new dae
        dae = ca.DaeBuilder(model_name)
        # ============================================
        # Declare time
        time = dae.add('time', 'independent')
        # If equations update time
        dt = 0.01

        # ============================================
        # Declare u

        thr = dae.add('thr', 'input', dict(start = 0.0))
        str = dae.add('str', 'input', dict(start = 0.0))
        # ============================================
        # Declare p

        l = dae.add('l', 'parameter', 'tunable', dict(start = 1.0))
        r = dae.add('r', 'parameter', 'tunable', dict(start = 0.1))
        m1_tau = dae.add('m1_tau', 'parameter', 'tunable', dict(start = 1.0))
        # ============================================
        # Declare c# ============================================
        # Declare cp

        # ============================================
        # Declare x

        m1_omega = dae.add('m1_omega', dict(start = 0.0))
        x = dae.add('x', dict(start = 0.0))
        y = dae.add('y', dict(start = 0.0))
        theta = dae.add('theta', dict(start = 0.0))
        # ============================================
        # Declare m

        a = dae.add('a', dict(start = 0.0))
        # ============================================
        # Declare y

        v = dae.add('v', dict(start = 0.0))
        m1_omega_ref = dae.add('m1_omega_ref', dict(start = 0.0))
        # ============================================
        # Declare z

        


        # ============================================
        # Declare pre_x
        pre_m1_omega = dae.pre(m1_omega)
        pre_x = dae.pre(x)
        pre_y = dae.pre(y)
        pre_theta = dae.pre(theta)
        # ============================================
        # Declare pre_m
        pre_a = dae.pre(a)
        # ============================================
        # Declare pre_z
        # ============================================
        # Define Condition Update Function: fc
        

        # ============================================
        # Define reset functions: fr
        # ============================================
        # Declare x_dot
        der_m1_omega = dae.der(m1_omega)
        der_x = dae.der(x)
        der_y = dae.der(y)
        der_theta = dae.der(theta)
        # ============================================
        def if_else_builder(s, builder, terminal_state):
            state = terminal_state
            for i, (cond, value) in enumerate(reversed(builder)):
                state = ca.if_else(s == int(cond[1:]), value, state)
            return state

        def if_else_builder2(builder, terminal_state):
            state = terminal_state
            for cond, value in reversed(builder):
                state = ca.if_else(cond, value, state)
            return state
        # ============================================

        def add_expression(dictionary, var, expression):
            if var not in dictionary.keys():
                dictionary[var] = []
            dictionary[var].append(expression)
                
            return dictionary
        # Define Continous Update Function: fx
        dae.eq(v, (r * m1_omega))
        dae.eq(der_x, (v * cos(theta)))
        dae.eq(der_y, (v * sin(theta)))
        dae.eq(der_theta, ((v / l) * tan(str)))
        dae.eq(m1_omega_ref, thr)
        dae.eq(a, 1.0)
        dae.eq(der_m1_omega, ((1.0 / m1_tau) * (m1_omega_ref - m1_omega)))
        


        dae.sort('w')
        self.dae = dae
    def display(self):
        self.dae.disp(True)

    def simulate(self, t0, tf, dt, x0=None, p0=None, f_u=None, max_events=100):
        """
        Simulate the modelica model
        """
        if p0 is None:
            p0 = self.dae.start(self.dae.p())
        
        if x0 is None:
            x0 = self.dae.start(self.dae.x())

        tgrid = np.arange(t0, tf, dt)
        simopts = dict(transition = self.dae.transition(), verbose = False,
            event_tol = 1e-12, max_events = 100000, max_event_iter = 2000)

        sim = ca.integrator('sim', 'cvodes', self.dae.create(), 0, tgrid, simopts)

        if f_u is None:
            simres = sim(x0 = x0, p = p0)
        else:
            simres = sim(x0 = x0, p = p0, u=f_u)

        return tgrid, simres
